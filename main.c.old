//
// NCURSES RPG ROGUELIKE - Raymond Mc Cambridge 12th Mar, 2017
//
//   TODO : 
//          Write level start function
//          Write screen resize function (center around player)
//
//

#include <ncurses.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

/*
typedef struct Dimensions {
    int y, x, h, w;
} Dimensions;

typedef struct Position {
    int y, x;
} Position;

typedef struct Statistics {
    int hp, stamina, strength;
} Statistics;

typedef struct Player {
    char name[MAX_NAME_SIZE]; // Name
    char ch; // ASCII Character used as player
    int color[2]; // Player Color pair 0:foreground;1:background
    Statistics stats; // Player Stats
    Position pos; // position on mapWin
    Position rPos; // real position on map
} Player;

typedef struct Scene {
    int size;
    char name[MAX_NAME_SIZE]; // Level name
    char mapFileName[MAX_NAME_SIZE*3]; // Map file name
    Dimensions dim; // Primary dimensions of Map
    Position pos; // Position on screen
    Position rPos; // Real Position in game
    char scnMap[MAPSIZE]; // character map
    char scnStat[MAPSIZE]; // character map
} Scene;

Dimensions getWinDim(WINDOW *win); // get dimensions y,x,h,w of a given window
void drawStatWin(WINDOW *statWin, WINDOW *mapWin, Scene *lMap, Dimensions termSize, Player *plr); // draw statistics window
void drawInvWin(WINDOW *invWin, Dimensions termSize); // draw inventory window
void drawMapWin(WINDOW *mapWin, FILE *mapF, Scene *lMap, Dimensions termSize, Player *plr); // draw map window
void createTestPlayer(Player *plr); // create a player for test purposes
void drawPlayer(WINDOW *mapWin, Player *plr); // draw Player on map
void inputHandle(WINDOW *mapWin, FILE *mapF, Scene *lMap, WINDOW *invWin, WINDOW *statWin, Player *plr); // input handler
void drawScene(WINDOW *mapWin, Scene *lMap, Player *plr); // draw scene
void loadScene(FILE *mapF, Scene *lMap); // load a scene from file
void movePlayer(int dir, Player *plr, Scene *lMap,  WINDOW *mapWin); // move the player
*/


/* test scene init */
Scene *lMap = malloc(sizeof(Scene)); // create scene object 
lMap->size = MAPSIZE; // Total Size of Map
lMap->dim.h = 50; // Height of 40
lMap->dim.w = 300; // Height of 40
lMap->rPos.y = 0; // y position on map
lMap->rPos.x = 0; // x position on map
lMap->pos.y = 0; // real y
lMap->pos.x = 0; // real x
loadScene(mapF, lMap);

// ENTRY POINT
int main(){
    // init ncurses
    initscr();
    // start_color();
    raw(); // Change to raw when inputhandler is written
    curs_set(0); // remove blinking cursor
    // start_color(); // start color system
    // init_pair(1, COLOR_GREEN, COLOR_RED); // green on red background
    // init player
    Player *plr = malloc(sizeof(Player)); // create a player in memory
    createTestPlayer(plr); // init test player

    // windows init
    Dimensions termSize = getWinDim(stdscr); // get primary window dimensions
    WINDOW *statWin = newwin(8, termSize.w, termSize.h-9, 0); // create statistics window
    WINDOW *invWin = newwin(termSize.h-8, 18, 0, 0); // create inventory window
    WINDOW *mapWin = newwin(termSize.h-8, termSize.w-19, 0, 19); // create map window

    // open map file or quit if failed
    FILE *mapF = fopen("./lvl1.map","r"); // load map file descriptor
    if(mapF == NULL) {
	    delwin(statWin);
	    delwin(invWin);
	    delwin(mapWin);
	    endwin();
            printf("Couldn't open map file...\n");
	    exit(0);
    }

    /* test scene init */
    Scene *lMap = malloc(sizeof(Scene)); // create scene object 
    lMap->size = 15000; // Total Size of Map
    lMap->dim.h = 50; // Height of 40
    lMap->dim.w = 300; // Height of 40
    lMap->rPos.y = 0; // y position on map
    lMap->rPos.x = 0; // x position on map
    lMap->pos.y = 0; // real y
    lMap->pos.x = 0; // real x
    loadScene(mapF, lMap);
    // refresh
    refresh();

    /* test cell Status */
    int i;
    for(i = 0; i < MAPSIZE; i++) {
        lMap->scnStat[i] = '1';
//	if (i % 2 == 0) {
//            lMap->scnStat[i] = '1';
//	} else {
//	    lMap->scnStat[i] = '0';
//	}
    }


    // MAIN LOOP
    while(1) {
	// get terminal size
        termSize = getWinDim(stdscr);
	// draw stats window
        drawStatWin(statWin, mapWin, lMap, termSize, plr);
	// draw inventory window
        drawInvWin(invWin, termSize);
	// draw map window, scene and player
        drawMapWin(mapWin, mapF, lMap, termSize, plr);
	// handle input
        inputHandle(mapWin, mapF, lMap, invWin, statWin, plr);
    }

    // end game
    getch();
    endwin();
    fclose(mapF);
    return 0;
}

/*
// Get dimmapWin,ensions of a window
Dimensions getWinDim(WINDOW *win) {
    Dimensions winDim;
    getbegyx(win, winDim.y, winDim.x);
    getmaxyx(win, winDim.h, winDim.w);
    return winDim;
}

// Draw the map window
void drawMapWin(WINDOW *mapWin, FILE *mapF, Scene *lMap, Dimensions termSize, Player *plr) {
    werase(mapWin);
    wresize(mapWin, termSize.h-8, termSize.w-19);
    //wborder(mapWin, ACS_VLINE, ACS_VLINE, ACS_HLINE, ACS_HLINE, ACS_ULCORNER, ACS_URCORNER, ACS_LLCORNER, ACS_LRCORNER);
    drawScene(mapWin, lMap, plr);
    wrefresh(mapWin);
}

// Draw the inventory window
void drawInvWin(WINDOW *invWin, Dimensions termSize) {
    werase(invWin);
    wresize(invWin, termSize.h-8, 19);
    wborder(invWin, ACS_VLINE, ACS_VLINE, ACS_HLINE, ACS_HLINE, ACS_ULCORNER, ACS_URCORNER, ACS_LLCORNER, ACS_LRCORNER);
    wrefresh(invWin);
}

// Draw the stats window
void drawStatWin(WINDOW *statWin, WINDOW *mapWin, Scene *lMap, Dimensions termSize, Player *plr) {
    werase(statWin);
    mvwin(statWin, termSize.h-8, 0);
    wborder(statWin, ACS_VLINE, ACS_VLINE, ACS_HLINE, ACS_HLINE, ACS_ULCORNER, ACS_URCORNER, ACS_LLCORNER, ACS_LRCORNER);
     // get dimensions of map screen
    //Dimensions mapDim = getWinDim(mapWin);

    mvwprintw(statWin, 1, 1, "Statistics");
    mvwprintw(statWin, 2, 1, " Plr->pos.y: %d", plr->pos.y);
    mvwprintw(statWin, 3, 1, "lMap->pos.y: %d", lMap->pos.y);
    mvwprintw(statWin, 4, 1, "Plr->rPos.y: %d", plr->rPos.y);
    wrefresh(statWin);
}
// Create a test player
void createTestPlayer(Player *plr) {
     strcpy(plr->name, "test_player");
     plr->ch = '@';
     plr->color[0] = 3;
     plr->color[1] = 1;
     plr->stats.stamina = 25;
     plr->pos.y = 15;
     plr->pos.x = 13;
     plr->rPos.y = 10;
     plr->rPos.x = 10;
     plr->stats.hp = 20;
     plr->stats.hp = 20;
     plr->stats.strength = 5;
}
*/
// Input Handler
void inputHandle(WINDOW *mapWin, FILE *mapF, Scene *lMap, WINDOW *invWin, WINDOW *statWin, Player *plr) {
    int ch;
    ch = getch();
    switch(ch) {
        case 'W':
        case 'w':
            movePlayer(DIR_UP, plr, lMap, mapWin);
            break;
        case 'A':
        case 'a':
            movePlayer(DIR_LEFT, plr, lMap, mapWin);
	    break;
        case 'S':
	case 's':
            movePlayer(DIR_DOWN, plr, lMap, mapWin);
	    break;
        case 'D':
        case 'd':
            movePlayer(DIR_RIGHT, plr, lMap, mapWin);
	    break;
        case 'q':
        case 'Q': // Quit
	    delwin(statWin);
	    delwin(invWin);
	    delwin(mapWin);
	    endwin();
            printf("Exit game cleanly...\n");
	    fclose(mapF);
	    exit(0);
	    break;
        default:
	    break;
    }
}
/*
// move the player
void movePlayer(int dir, Player *plr, Scene *lMap,  WINDOW *mapWin) {
    Dimensions mapDim = getWinDim(mapWin);
    char cellCh;
    switch(dir) {
        case DIR_UP:
	    cellCh = mvwinch(mapWin,plr->pos.y-1, plr->pos.x);
	    switch(cellCh) {
		// simple ground corridor areas
	        case '#':
		case '.':
		case '/':
		    if(plr->pos.y<6 && lMap->pos.y<0) {
                        plr->rPos.y--;
                        lMap->pos.y++;
                    }
    	        else if(plr->pos.y > 0) {
    	            plr->pos.y--;
                    plr->rPos.y--;
    	            }
                    break;
	        case '@': 
		    break;
	        case '<':
		    break;
	        case '>':
		    break;
		default:
		    // numbers and small letters
	       	    for(int asc=49; asc < 58; asc++) {
            	        if ((int)cellCh == asc) {
	    	            for(int i = 0; i < MAPSIZE; i++) {
			        if(lMap->scnMap[i] == asc) {
			            lMap->scnMap[i] = '.';
			        }
			    }
			}
	            }
        	    for(int asc=97; asc < 123; asc++) {
                	if ((int)cellCh == asc) {
	        	    for(int i = 0; i < MAPSIZE; i++) {
		    		if(lMap->scnMap[i] == asc) {
		        	    lMap->scnMap[i] = '#';
		    		}
			    }
			}
	     	    }
		    break;
	    }
            break;
        case DIR_LEFT:
	    cellCh = mvwinch(mapWin,plr->pos.y, plr->pos.x-1);
	    switch(cellCh) {
	        case '.':
	        case '/':
	        case '#':
                    if(plr->pos.x<6 && lMap->pos.x<0) {
                        lMap->pos.x++;
                        plr->rPos.x--;
                    else if(plr->pos.x > 0) {
                        plr->rPos.x--;
    		        plr->pos.x--;
                    }
		    break;
                 default:
		    // numbers and small letters
	       	    for(int asc=49; asc < 58; asc++) {
            	        if ((int)cellCh == asc) {
	    	            for(int i = 0; i < MAPSIZE; i++) {
			        if(lMap->scnMap[i] == asc) {
			            lMap->scnMap[i] = '.';
			        }
			    }
			}
	            }
        	    for(int asc=97; asc < 123; asc++) {
                	if ((int)cellCh == asc) {
	        	    for(int i = 0; i < MAPSIZE; i++) {
		    		if(lMap->scnMap[i] == asc) {
		        	    lMap->scnMap[i] = '#';
		    		}
			    }
			}
	     	    }
		    break;
            }
	    break;
        case DIR_DOWN:
	    cellCh = mvwinch(mapWin,plr->pos.y+1, plr->pos.x);
	    switch(cellCh) {
	        case '.':
	        case '/':
	        case '#':
        	    if(plr->pos.y>(mapDim.h-5) && plr->rPos.y<=(lMap->dim.h-5)) {
                        lMap->pos.y--;
                        plr->rPos.y++;
                    }
                    else if(plr->rPos.y < lMap->dim.h-1) {
          		plr->pos.y++;
                        plr->rPos.y++;
                    }
		    break;
		default:
		    // numbers and small letters
	       	    for(int asc=49; asc < 58; asc++) {
            	        if ((int)cellCh == asc) {
	    	            for(int i = 0; i < MAPSIZE; i++) {
			        if(lMap->scnMap[i] == asc) {
			            lMap->scnMap[i] = '.';
			        }
			    }
			}
	            }
        	    for(int asc=97; asc < 123; asc++) {
                	if ((int)cellCh == asc) {
	        	    for(int i = 0; i < MAPSIZE; i++) {
		    		if(lMap->scnMap[i] == asc) {
		        	    lMap->scnMap[i] = '#';
		    		}
			    }
			}
	     	    }
		    break;
            }
	    break;
        case DIR_RIGHT:
	    cellCh = mvwinch(mapWin,plr->pos.y, plr->pos.x+1);
	    switch(cellCh) {
	        case '.':
	        case '/':
	        case '#':
		    if(plr->pos.x>=(mapDim.w-6) && plr->rPos.x<=(lMap->dim.w-6)) {
        	        lMap->pos.x--;
			plr->rPos.x++;
            		}
           		else if(plr->rPos.x < lMap->dim.w-1){
                	    plr->pos.x++;
                	    plr->rPos.x++;
            		}
	            break;
                default:
		    // numbers and small letters
	       	    for(int asc=49; asc < 58; asc++) {
            	        if ((int)cellCh == asc) {
	    	            for(int i = 0; i < MAPSIZE; i++) {
			        if(lMap->scnMap[i] == asc) {
			            lMap->scnMap[i] = '.';
		 	        }
			    }
			}
	            }
        	    for(int asc=97; asc < 123; asc++) {
                	if ((int)cellCh == asc) {
	        	    for(int i = 0; i < MAPSIZE; i++) {
		    		if(lMap->scnMap[i] == asc) {
		        	    lMap->scnMap[i] = '#';
		    		}
			    }
			}
	     	    }
                    break;
	     } 
        default:
            break;
    } 
}

// Draw the player
void drawPlayer(WINDOW *mapWin, Player *plr){
    //attron(COLOR_PAIR(1)); 
    mvwprintw(mapWin, plr->pos.y, plr->pos.x, "%c", plr->ch);
    //attroff(COLOR_PAIR(1)); 
}

// Draw the scene on the mapWin
void drawScene(WINDOW *mapWin, Scene *lMap, Player *plr) {
Position mapIndex;
    int mapCount = 0;
    for(mapIndex.y = 0; mapIndex.y < lMap->dim.h; mapIndex.y++) {
        for(mapIndex.x = 0; mapIndex.x < lMap->dim.w; mapIndex.x++) {
            mapCount++;
	    // if cell active print character
	    if(lMap->scnStat[mapCount] == '0') {
	        // cell inactive
                mvwprintw(mapWin, mapIndex.y + lMap->pos.y, mapIndex.x + lMap->pos.x, "%c", ' ');
	    } else {
		// handle active status'
                mvwprintw(mapWin, mapIndex.y + lMap->pos.y, mapIndex.x + lMap->pos.x, "%c", lMap->scnMap[mapCount]);
	    }
        }
    }
    //attron(COLOR_PAIR(1));
    drawPlayer(mapWin, plr);
    //attroff(COLOR_PAIR(1));
}

// load a scene into the scene manager
void loadScene(FILE *mapF, Scene *lMap) {
    Position mapIndex; // Current map parse index
    rewind(mapF); // reset pointer to start of file
    // map chars from file to mapWin including real position co-efficient
    int mapCount = 0;
    for(mapIndex.y = 0; mapIndex.y < lMap->dim.h; mapIndex.y++) {
        for(mapIndex.x = 0; mapIndex.x < lMap->dim.w; mapIndex.x++) {
	    char tempCh = fgetc(mapF);
            lMap->scnMap[mapCount] = tempCh;
	    mapCount++;
        }
    }
}
*/